import argparse
import random as rd

def get_args(argv = None):
	"""Parse and split the output file generated by transdecoder in a training and a test set ready to be used by augustus."""	
	parser = argparse.ArgumentParser()
	parser.add_argument("-i", "--filename", help="Take genome-based transdecoder gtf file as input.")
	parser.add_argument("-s", "--seed", type = int, help="seed number.", default = 1)
	return parser.parse_args(argv)


def read_filin(input_file):
	gene_dict = {}
	gene_pos = {}
	mrna_pos = {}
	gene_score = {}
	with open(input_file, "r") as filin:
		for line in filin:
			line = line.strip()
			line = line.split("\t")
			if len(line) == 0 or len(line) == 1:
				continue
			line = line[:-1] + line[-1].split(";")
			if line[2] == "gene":
				score = line[-1].split("score%3D")[-1]
				gene_id = line[8]
				gene_dict[gene_id] = {}
				gene_pos[gene_id] = [line[3], line[4]]
				gene_score[gene_id] = float(score)
			elif line[2] == "mRNA":
				mRNA_id = ".".join(line[8].split(".")[0:-1])
				gene_dict[gene_id][mRNA_id] = []
				mrna_pos[mRNA_id] = [line[3], line[4]]
			else:
				gene_dict[gene_id][mRNA_id].append(line[:-2])
	return [gene_dict, gene_pos, mrna_pos, gene_score]
	

def chose_best_gene(gene_dict, gene_score):
	gene_score_set = set()
	b_gene_dict = {}
	best_score = list(sorted(gene_score.values(), reverse = True)[0:1200])
	for gene in best_score:
		for key, value in gene_score.items():
			if gene == value:
				score_id = key
				gene_score_set.add(score_id)
	for gene_id in gene_score_set:
		b_gene_dict[gene_id] = gene_dict[".".join(gene_id.split(".")[0:2])]
	return b_gene_dict


def filter_isoform(b_gene_dict):
	f_gene_dict = {}
	gene_cds_dict = {}
	for gene in b_gene_dict:	
		if len(b_gene_dict[gene]) == 1:
			iso_key = list(b_gene_dict[gene].keys())[0]
			f_gene_dict[iso_key] = b_gene_dict[gene][iso_key]
		else:
			cds_dict = {}
			for isoform in b_gene_dict[gene]:
				cds = 0
				for line in b_gene_dict[gene][isoform]:
					if line[2] == "CDS":
						cds = int(line[4]) - int(line[3]) + cds
						cds_dict[isoform] = cds
			max_cds = max(cds_dict.values())
			for key, value in cds_dict.items():
				if max_cds == value:
					max_cds_id = key
					f_gene_dict[max_cds_id] = b_gene_dict[gene][max_cds_id]
					gene_cds_dict[max_cds_id] = max_cds
					break
	return [f_gene_dict, gene_cds_dict]
					

def split_dict(f_gene_dict, seed):
	rd.seed(1)
	list_id = list(f_gene_dict.keys())
	training_set = rd.sample(list_id, 1000)
	test_set = []
	for gene_id in list_id:
		if gene_id not in training_set:
			test_set.append(gene_id)
	training_dict = {}
	test_dict = {}
	for gene in training_set:
		training_dict[gene] = f_gene_dict[gene]
	for gene in test_set:
		test_dict[gene] = f_gene_dict[gene]
	return [training_dict, test_dict]
	
	
def write_output(dict_set, gene_pos, mrna_pos, output_name):
	with open(output_name, "w") as filout:
		for gene in dict_set:
			gene_line = dict_set[gene][0][:]
			gene_line[2] = "gene"
			gene_line[3:5] = gene_pos[".".join(gene.split(".")[0:2])]
			gene_line.append('gene_id "' + str(gene.split("=")[1]) + '"; ')
			gene_line.append("transcript_id " + str(gene.split("=")[1]) + '"; ')
			filout.write("\t".join(gene_line[:-1]) + " " + gene_line[-1] + "\n")
			mrna_line = dict_set[gene][0][:]
			mrna_line[2] = "mRNA"
			mrna_line[3:5] = mrna_pos[gene][0:2]
			mrna_line.append('gene_id "' + str(gene.split("=")[1]) + '"; ')
			mrna_line.append("transcript_id " + str(gene.split("=")[1]) + '"; ')
			filout.write("\t".join(mrna_line[:-1]) + " " + mrna_line[-1] + "\n")
			for line in dict_set[gene]:
				filout.write("\t".join(line) + "\t" + gene_line[-2] + gene_line[-1] + "\n")

		
if __name__ == "__main__":

	argvals = None
	args = get_args(argvals)
	gene_dict, gene_pos, mrna_pos, gene_score = read_filin(args.filename)
	b_gene_dict = chose_best_gene(gene_dict, gene_score)	
	f_gene_dict, gene_cds_dict = filter_isoform(b_gene_dict)
	training_dict, test_dict = split_dict(f_gene_dict, args.seed)
	write_output(training_dict, gene_pos, mrna_pos, "training_set.gtf")
	write_output(test_dict, gene_pos, mrna_pos, "test_set.gtf")
